#!/usr/bin/env python3
"""
Provide AWS role credentials to dev container.

This script runs on the HOST machine to assume an AWS role with MFA and write
temporary credentials to .aws-dev/, which is mounted into the dev container.

Usage:
    uv run provide-role                          # Interactive (prompts for MFA)
    uv run provide-role --mfa-code 123456       # Non-interactive
    uv run provide-role --duration 3600          # Custom duration (1 hour)
    uv run provide-role --mfa-code 123456 --duration 7200
"""

import argparse
import json
import subprocess
import sys
import tomllib
from pathlib import Path

REPO_ROOT = Path(__file__).parent.parent
PYPROJECT_PATH = REPO_ROOT / "pyproject.toml"
AWS_DEV_DIR = REPO_ROOT / ".aws-dev"
CREDENTIALS_FILE = AWS_DEV_DIR / "credentials"
CONFIG_FILE = AWS_DEV_DIR / "config"

DEFAULT_DURATION = 43200  # 12 hours (max for IAM roles)


def get_mfa_serial() -> str:
    """Auto-detect MFA serial from current AWS identity."""
    try:
        # Get current caller identity
        result = subprocess.run(
            ["aws", "sts", "get-caller-identity"],
            capture_output=True,
            text=True,
            check=True,
        )
        identity = json.loads(result.stdout)
        user_arn = identity.get("Arn", "")

        # Convert user ARN to MFA ARN
        # arn:aws:iam::123456789012:user/username -> arn:aws:iam::123456789012:mfa/username
        if ":user/" in user_arn:
            mfa_serial = user_arn.replace(":user/", ":mfa/")
            return mfa_serial

        raise ValueError(f"Could not determine MFA serial from ARN: {user_arn}")

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to get AWS identity: {e.stderr}") from e
    except (json.JSONDecodeError, KeyError) as e:
        raise RuntimeError(f"Failed to parse AWS identity response: {e}") from e


def assume_role(role_arn: str, mfa_code: str, mfa_serial: str, duration: int) -> dict:
    """Assume the specified AWS role with MFA."""
    cmd = [
        "aws",
        "sts",
        "assume-role",
        "--role-arn",
        role_arn,
        "--role-session-name",
        "dev-container",
        "--duration-seconds",
        str(duration),
        "--serial-number",
        mfa_serial,
        "--token-code",
        mfa_code,
    ]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to assume role: {e.stderr}") from e


def write_credentials(creds: dict, region: str, role_arn: str) -> None:
    """Write credentials to .aws-dev/ in standard AWS format."""
    AWS_DEV_DIR.mkdir(exist_ok=True)

    # Write credentials file
    credentials_content = f"""# Auto-generated by provide_role
# Role: {role_arn}
# Expires: {creds['Expiration']}
[default]
aws_access_key_id = {creds['AccessKeyId']}
aws_secret_access_key = {creds['SecretAccessKey']}
aws_session_token = {creds['SessionToken']}
"""
    CREDENTIALS_FILE.write_text(credentials_content)

    # Write config file
    config_content = f"""[default]
region = {region}
output = json
"""
    CONFIG_FILE.write_text(config_content)


def main():
    parser = argparse.ArgumentParser(
        description="Provide AWS role credentials to dev container (requires MFA)"
    )
    parser.add_argument(
        "--mfa-code",
        help="MFA code (will prompt if not provided)",
    )
    parser.add_argument(
        "--duration",
        type=int,
        default=DEFAULT_DURATION,
        help=f"Session duration in seconds (default: {DEFAULT_DURATION} = 12 hours)",
    )
    args = parser.parse_args()

    # Read config
    try:
        with open(PYPROJECT_PATH, "rb") as f:
            config = tomllib.load(f)
    except FileNotFoundError:
        print(f"‚ùå Error: {PYPROJECT_PATH} not found", file=sys.stderr)
        sys.exit(1)

    dev_config = config.get("tool", {}).get("webapp", {}).get("dev", {})
    role_arn = dev_config.get("aws_role_arn", "")
    region = dev_config.get("aws_region", "eu-west-2")

    if not role_arn:
        print("‚ùå Error: No AWS role configured", file=sys.stderr)
        print(
            "   Add to pyproject.toml: [tool.webapp.dev] aws_role_arn = \"arn:...\"",
            file=sys.stderr,
        )
        sys.exit(1)

    print(f"üîê Assuming role: {role_arn}")
    print(f"‚è±Ô∏è  Duration: {args.duration} seconds ({args.duration / 3600:.1f} hours)")

    # Auto-detect MFA serial
    try:
        mfa_serial = get_mfa_serial()
        print(f"üîë MFA device: {mfa_serial}")
    except RuntimeError as e:
        print(f"‚ùå {e}", file=sys.stderr)
        sys.exit(1)

    # Get MFA code (from args or prompt)
    mfa_code = args.mfa_code
    if not mfa_code:
        mfa_code = input("Enter MFA code: ").strip()
        if not mfa_code:
            print("‚ùå MFA code required", file=sys.stderr)
            sys.exit(1)

    # Assume role
    try:
        response = assume_role(role_arn, mfa_code, mfa_serial, args.duration)
        creds = response["Credentials"]
    except RuntimeError as e:
        print(f"‚ùå {e}", file=sys.stderr)
        sys.exit(1)

    # Write credentials
    write_credentials(creds, region, role_arn)

    print()
    print(f"‚úÖ Credentials written to {AWS_DEV_DIR}/")
    print(f"   Expires: {creds['Expiration']}")
    print()
    print("üì¶ Credentials are now available in your dev container")
    print("   (No restart needed - credentials update live)")


if __name__ == "__main__":
    main()
