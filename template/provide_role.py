#!/usr/bin/env python3
"""
Provide AWS role credentials to dev container.

This script runs on the HOST machine to assume the task/container role from your
currently active AWS credentials (dev/prod role) and write temporary credentials
to .aws-dev/, which is mounted into the dev container.

Prerequisites:
    You must have already assumed your dev/prod role from GDS-users account.
    This script will use those credentials to assume the container role.

Usage:
    uv run provide-role                    # Use default duration (12 hours)
    uv run provide-role --duration 3600    # Custom duration (1 hour)
"""

import argparse
import json
import subprocess
import sys
import tomllib
from pathlib import Path

REPO_ROOT = Path(__file__).parent.parent
PYPROJECT_PATH = REPO_ROOT / "pyproject.toml"
AWS_DEV_DIR = REPO_ROOT / ".aws-dev"
CREDENTIALS_FILE = AWS_DEV_DIR / "credentials"
CONFIG_FILE = AWS_DEV_DIR / "config"

DEFAULT_DURATION = 8 * 60 * 60  # 8 hours (max for IAM roles)


def get_current_identity() -> dict:
    """Get current AWS identity to verify credentials are active."""
    try:
        result = subprocess.run(
            ["aws", "sts", "get-caller-identity"],
            capture_output=True,
            text=True,
            check=True,
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to get AWS identity: {e.stderr}") from e
    except json.JSONDecodeError as e:
        raise RuntimeError(f"Failed to parse AWS identity response: {e}") from e


def assume_role(role_arn: str, duration: int) -> dict:
    """Assume the specified AWS role from current credentials ."""
    cmd = [
        "aws",
        "sts",
        "assume-role",
        "--role-arn",
        role_arn,
        "--role-session-name",
        "dev-container",
        "--duration-seconds",
        str(duration),
    ]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to assume role: {e.stderr}") from e


def write_credentials(creds: dict, region: str, role_arn: str) -> None:
    """Write credentials to .aws-dev/ in standard AWS format."""
    AWS_DEV_DIR.mkdir(exist_ok=True)

    # Write credentials file
    credentials_content = f"""# Auto-generated by provide_role
# Role: {role_arn}
# Expires: {creds["Expiration"]}
[default]
aws_access_key_id = {creds["AccessKeyId"]}
aws_secret_access_key = {creds["SecretAccessKey"]}
aws_session_token = {creds["SessionToken"]}
"""
    CREDENTIALS_FILE.write_text(credentials_content)

    # Write config file
    config_content = f"""[default]
region = {region}
output = json
"""
    CONFIG_FILE.write_text(config_content)


def main():
    parser = argparse.ArgumentParser(
        description="Provide AWS role credentials to dev container"
    )
    parser.add_argument(
        "--duration",
        type=int,
        default=DEFAULT_DURATION,
        help=f"Session duration in seconds (default: {DEFAULT_DURATION} = 8 hours)",
    )
    args = parser.parse_args()

    # Read config
    try:
        with open(PYPROJECT_PATH, "rb") as f:
            config = tomllib.load(f)
    except FileNotFoundError:
        print(f"‚ùå Error: {PYPROJECT_PATH} not found", file=sys.stderr)
        sys.exit(1)

    dev_config = config.get("tool", {}).get("webapp", {}).get("dev", {})
    role_arn = dev_config.get("aws_role_arn", "")
    region = dev_config.get("aws_region", "eu-west-2")

    if not role_arn:
        print("‚ùå Error: No AWS role configured", file=sys.stderr)
        print(
            '   Add to pyproject.toml: [tool.webapp.dev] aws_role_arn = "arn:..."',
            file=sys.stderr,
        )
        sys.exit(1)

    # Check current AWS identity
    print("üîç Checking current AWS credentials...")
    try:
        identity = get_current_identity()
        current_arn = identity.get("Arn", "")
        print(f"   Current identity: {current_arn}")

        # Check if already using assumed role
        if ":assumed-role/" not in current_arn and ":user/" in current_arn:
            print()
            print("‚ö†Ô∏è  Warning: You appear to be using base user credentials")
            print(
                "   You should first assume your dev/prod role from GDS-users account"
            )
            print("   Example: ")
            print("   export AWS_PROFILE=assume-ds-role")
            print("   uv run provide-role")
            print("")
            print()
            response = input("Continue anyway? (y/N): ").strip().lower()
            if response != "y":
                print("Aborted")
                sys.exit(0)
    except RuntimeError as e:
        print(f"‚ùå {e}", file=sys.stderr)
        sys.exit(1)

    print()
    print(f"üîê Assuming container role: {role_arn}")
    print(f"‚è±Ô∏è  Duration: {args.duration} seconds ({args.duration / 3600:.1f} hours)")

    # Assume role (no MFA needed - using current credentials)
    try:
        response = assume_role(role_arn, args.duration)
        creds = response["Credentials"]
    except RuntimeError as e:
        print(f"‚ùå {e}", file=sys.stderr)
        print()
        print("üí° Tip: Make sure you've already assumed your dev/prod role")
        print(
            "   The role you're currently using must have permission to assume the container role"
        )
        sys.exit(1)

    # Write credentials
    write_credentials(creds, region, role_arn)

    print()
    print(f"‚úÖ Credentials written to {AWS_DEV_DIR}/")
    print(f"   Expires: {creds['Expiration']}")
    print()
    print("üì¶ Credentials are now available in your dev container")
    print()


if __name__ == "__main__":
    main()
